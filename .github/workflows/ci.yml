name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.89.0, nightly]
        include:
          - rust: stable
            cache-key: stable
          - rust: 1.89.0
            cache-key: 1.89.0
          - rust: nightly
            cache-key: nightly

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.cache-key }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-tarpaulin
      if: matrix.rust == 'stable'
      run: cargo install cargo-tarpaulin

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Check clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-targets --all-features

    - name: Run tests with coverage (stable only)
      if: matrix.rust == 'stable'
      run: cargo tarpaulin --out Html --output-dir coverage

    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/tarpaulin-report.html
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.89.0, stable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release

    - name: Build debug
      run: cargo build

    - name: Check binary size
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          echo "Binary size: $(stat -c%s target/release/website-mirror) bytes"
        elif [ "${{ runner.os }}" = "macOS" ]; then
          echo "Binary size: $(stat -f%z target/release/website-mirror) bytes"
        else
          echo "Binary size: $(stat -c%s target/release/website-mirror.exe) bytes"
        fi

  security:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Dependency Review
      uses: actions/dependency-review-action@v3 